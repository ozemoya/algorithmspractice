Data Structure: a named location that can be used to store and organize Data

example: tree
 Family tree a heirachy of family relationships 

example: array
a collection of elements stored a contiguous memory locations

Algorithm: A set of steps a program takes to finish a task

example: Baking a pizza
    1. Heat the oven to 550F
    2. Knead the dough
    3. Add topings 

example: linear search
    one by one, examine the elements of an array to find a value


Why learn DS&A? 
    1. You'll write code that is both time and memory efficient
    2. Commonly asked questions involve DS&A in coding job interviews 

Time Complexity:
Measure of how long it takes the algorithm to run

Space Complexity:
Amount of memory taken up on the computer

Algorithms need a balance between the two. 

The steps in the algorithm need to be in a very specific order
The steps also need to be distinct 
The algorithm should produce a result 
The algorithm should complete in a finite amount of time 

Big O 
Theoretical definition of the complexity of an algorithm as a function of the size
 - notation used to describe complexity "O(n)" O comes from --> Order of magnitude of complexity
 
 O(n) - Linear search
 Logorihmitic Runtime- O(logn)or O(ln n) - Binary Search

Quadratic Time: n^2

Quasilinear Runtimes: O(nlogn) - Merge Sort

Unusuable Runtimes: 
Expontential Runtimes- O(x^n) (Brute Force)

Factorial: O(n!), n! = n(n-1)(n-2).....(2)(1)
3!: 3 x 2 x 1 = 6

Recursive Binary Search:It calls itself, it repeatedly makes a new list until the solution is found 

Operations on Data Structures:

- Access and read values 
- Search for an arbitrary values 
- Insert values at any point into the Structure
- Delete values in the structures 

Linked list

Self Referential Object - includes the nodes themselves
Singly Linked List- each node stores a ref to a next node in a list
double Linked List - Stores node before and after 